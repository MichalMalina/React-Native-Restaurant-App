{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\Michal\\\\WebstormProjects\\\\new_react\\\\my-react-app\\\\node_modules\\\\react-native-screens\\\\src\\\\native-stack\\\\navigators\\\\createNativeStackNavigator.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { createNavigatorFactory, useNavigationBuilder, StackRouter, StackActions } from '@react-navigation/native';\nimport { screensEnabled } from 'react-native-screens';\nimport NativeStackView from \"../views/NativeStackView\";\n\nfunction NativeStackNavigator(props) {\n  if (!screensEnabled()) {\n    throw new Error('Native stack is only available if React Native Screens is enabled.');\n  }\n\n  var initialRouteName = props.initialRouteName,\n      children = props.children,\n      screenOptions = props.screenOptions,\n      rest = _objectWithoutProperties(props, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenOptions: screenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    return navigation.addListener && navigation.addListener('tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NativeStackView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default createNavigatorFactory(NativeStackNavigator);","map":{"version":3,"sources":["C:/Users/Michal/WebstormProjects/new_react/my-react-app/node_modules/react-native-screens/src/native-stack/navigators/createNativeStackNavigator.tsx"],"names":["React","createNavigatorFactory","useNavigationBuilder","StackRouter","StackActions","screensEnabled","NativeStackView","NativeStackNavigator","props","Error","initialRouteName","children","screenOptions","rest","state","descriptors","navigation","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,sBADF,EAEEC,oBAFF,EAIEC,WAJF,EAOEC,YAPF,QAQO,0BARP;AAUA,SACEC,cADF,QAGO,sBAHP;AAIA,OAAOC,eAAP;;AAOA,SAASC,oBAAT,CAA8BC,KAA9B,EAAgE;AAC9D,MAAI,CAACH,cAAc,EAAnB,EAAuB;AACrB,UAAM,IAAII,KAAJ,CACJ,oEADI,CAAN;AAGD;;AAL6D,MAOtDC,gBAPsD,GAOCF,KAPD,CAOtDE,gBAPsD;AAAA,MAOpCC,QAPoC,GAOCH,KAPD,CAOpCG,QAPoC;AAAA,MAO1BC,aAP0B,GAOCJ,KAPD,CAO1BI,aAP0B;AAAA,MAORC,IAPQ,4BAOCL,KAPD;;AAAA,8BAQnBN,oBAAoB,CAK7DC,WAL6D,EAKhD;AACbO,IAAAA,gBAAgB,EAAhBA,gBADa;AAEbC,IAAAA,QAAQ,EAARA,QAFa;AAGbC,IAAAA,aAAa,EAAbA;AAHa,GALgD,CARD;AAAA,MAQtDE,KARsD,yBAQtDA,KARsD;AAAA,MAQ/CC,WAR+C,yBAQ/CA,WAR+C;AAAA,MAQlCC,UARkC,yBAQlCA,UARkC;;AAmB9DhB,EAAAA,KAAK,CAACiB,SAAN,CACE;AAAA,WACED,UAAU,CAACE,WAAX,IACAF,UAAU,CAACE,WAAX,CAAuB,UAAvB,EAAmC,UAACC,CAAD,EAAO;AACxC,UAAMC,SAAS,GAAGJ,UAAU,CAACI,SAAX,EAAlB;AAIAC,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACEP,KAAK,CAACQ,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;AAGAP,UAAAA,UAAU,CAACQ,QAAX,iCACKpB,YAAY,CAACqB,QAAb,EADL;AAEEC,YAAAA,MAAM,EAAEZ,KAAK,CAACa;AAFhB;AAID;AACF,OAboB,CAArB;AAcD,KAnBD,CAFF;AAAA,GADF,EAuBE,CAACX,UAAD,EAAaF,KAAK,CAACQ,KAAnB,EAA0BR,KAAK,CAACa,GAAhC,CAvBF;AA0BA,SACE,oBAAC,eAAD,eACMd,IADN;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,UAAU,EAAEE,UAHd;AAIE,IAAA,WAAW,EAAED,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAQD;;AAED,eAAed,sBAAsB,CAKnCM,oBALmC,CAArC","sourcesContent":["import * as React from 'react';\nimport {\n  createNavigatorFactory,\n  useNavigationBuilder,\n  EventArg,\n  StackRouter,\n  StackNavigationState,\n  StackRouterOptions,\n  StackActions,\n} from '@react-navigation/native';\n\nimport {\n  screensEnabled,\n  // eslint-disable-next-line import/no-unresolved\n} from 'react-native-screens';\nimport NativeStackView from '../views/NativeStackView';\nimport {\n  NativeStackNavigatorProps,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n} from '../types';\n\nfunction NativeStackNavigator(props: NativeStackNavigatorProps) {\n  if (!screensEnabled()) {\n    throw new Error(\n      'Native stack is only available if React Native Screens is enabled.'\n    );\n  }\n\n  const { initialRouteName, children, screenOptions, ...rest } = props;\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NativeStackView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"module"}