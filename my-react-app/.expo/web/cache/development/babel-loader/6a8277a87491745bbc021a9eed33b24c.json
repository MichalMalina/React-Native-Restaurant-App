{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Michal\\\\WebstormProjects\\\\new_react\\\\my-react-app\\\\node_modules\\\\react-native-screens\\\\src\\\\native-stack\\\\views\\\\NativeStackView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ScreenStack, Screen as ScreenComponent } from 'react-native-screens';\nimport { StackActions, useTheme } from '@react-navigation/native';\nimport HeaderConfig from \"./HeaderConfig\";\nvar Screen = ScreenComponent;\nexport default function NativeStackView(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  return React.createElement(ScreenStack, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, state.routes.map(function (route) {\n    var _descriptors$route$ke = descriptors[route.key],\n        options = _descriptors$route$ke.options,\n        renderScene = _descriptors$route$ke.render;\n    var gestureEnabled = options.gestureEnabled,\n        _options$stackPresent = options.stackPresentation,\n        stackPresentation = _options$stackPresent === void 0 ? 'push' : _options$stackPresent,\n        stackAnimation = options.stackAnimation,\n        contentStyle = options.contentStyle;\n    return React.createElement(Screen, {\n      key: route.key,\n      style: StyleSheet.absoluteFill,\n      gestureEnabled: Platform.OS === 'android' ? false : gestureEnabled,\n      stackPresentation: stackPresentation,\n      stackAnimation: stackAnimation,\n      onAppear: function onAppear() {\n        navigation.emit({\n          type: 'appear',\n          target: route.key\n        });\n      },\n      onDismissed: function onDismissed() {\n        navigation.emit({\n          type: 'dismiss',\n          target: route.key\n        });\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, React.createElement(HeaderConfig, _extends({}, options, {\n      route: route,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    })), React.createElement(View, {\n      style: [styles.container, {\n        backgroundColor: stackPresentation !== 'transparentModal' ? colors.background : undefined\n      }, contentStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, renderScene()));\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/Michal/WebstormProjects/new_react/my-react-app/node_modules/react-native-screens/src/native-stack/views/NativeStackView.tsx"],"names":["React","ScreenStack","Screen","ScreenComponent","StackActions","useTheme","HeaderConfig","NativeStackView","state","navigation","descriptors","colors","styles","container","routes","map","route","key","options","renderScene","render","gestureEnabled","stackPresentation","stackAnimation","contentStyle","StyleSheet","absoluteFill","Platform","OS","emit","type","target","dispatch","pop","source","backgroundColor","background","undefined","create","flex"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAEA,SACEC,WADF,EAEEC,MAAM,IAAIC,eAFZ,QAIO,sBAJP;AAKA,SAEEC,YAFF,EAGEC,QAHF,QAIO,0BAJP;AAKA,OAAOC,YAAP;AAMA,IAAMJ,MAAM,GAAIC,eAAhB;AAQA,eAAe,SAASI,eAAT,OAIL;AAAA,MAHRC,KAGQ,QAHRA,KAGQ;AAAA,MAFRC,UAEQ,QAFRA,UAEQ;AAAA,MADRC,WACQ,QADRA,WACQ;;AAAA,kBACWL,QAAQ,EADnB;AAAA,MACAM,MADA,aACAA,MADA;;AAGR,SACE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEC,MAAM,CAACC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAiB,UAACC,KAAD,EAAW;AAAA,gCACcN,WAAW,CAACM,KAAK,CAACC,GAAP,CADzB;AAAA,QACnBC,OADmB,yBACnBA,OADmB;AAAA,QACFC,WADE,yBACVC,MADU;AAAA,QAGzBC,cAHyB,GAOvBH,OAPuB,CAGzBG,cAHyB;AAAA,gCAOvBH,OAPuB,CAIzBI,iBAJyB;AAAA,QAIzBA,iBAJyB,sCAIL,MAJK;AAAA,QAKzBC,cALyB,GAOvBL,OAPuB,CAKzBK,cALyB;AAAA,QAMzBC,YANyB,GAOvBN,OAPuB,CAMzBM,YANyB;AAS3B,WACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAER,KAAK,CAACC,GADb;AAEE,MAAA,KAAK,EAAEQ,UAAU,CAACC,YAFpB;AAGE,MAAA,cAAc,EAAEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B,KAA5B,GAAoCP,cAHtD;AAIE,MAAA,iBAAiB,EAAEC,iBAJrB;AAKE,MAAA,cAAc,EAAEC,cALlB;AAME,MAAA,QAAQ,EAAE,oBAAM;AACdd,QAAAA,UAAU,CAACoB,IAAX,CAAgB;AACdC,UAAAA,IAAI,EAAE,QADQ;AAEdC,UAAAA,MAAM,EAAEf,KAAK,CAACC;AAFA,SAAhB;AAID,OAXH;AAYE,MAAA,WAAW,EAAE,uBAAM;AACjBR,QAAAA,UAAU,CAACoB,IAAX,CAAgB;AACdC,UAAAA,IAAI,EAAE,SADQ;AAEdC,UAAAA,MAAM,EAAEf,KAAK,CAACC;AAFA,SAAhB;AAKAR,QAAAA,UAAU,CAACuB,QAAX,iCACK5B,YAAY,CAAC6B,GAAb,EADL;AAEEC,UAAAA,MAAM,EAAElB,KAAK,CAACC,GAFhB;AAGEc,UAAAA,MAAM,EAAEvB,KAAK,CAACS;AAHhB;AAKD,OAvBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAwBE,oBAAC,YAAD,eAAkBC,OAAlB;AAA2B,MAAA,KAAK,EAAEF,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAxBF,EAyBE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACLJ,MAAM,CAACC,SADF,EAEL;AACEsB,QAAAA,eAAe,EACbb,iBAAiB,KAAK,kBAAtB,GACIX,MAAM,CAACyB,UADX,GAEIC;AAJR,OAFK,EAQLb,YARK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWGL,WAAW,EAXd,CAzBF,CADF;AAyCD,GAlDA,CADH,CADF;AAuDD;AAED,IAAMP,MAAM,GAAGa,UAAU,CAACa,MAAX,CAAkB;AAC/BzB,EAAAA,SAAS,EAAE;AACT0B,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport {\n  ScreenStack,\n  Screen as ScreenComponent,\n  ScreenProps,\n} from 'react-native-screens';\nimport {\n  StackNavigationState,\n  StackActions,\n  useTheme,\n} from '@react-navigation/native';\nimport HeaderConfig from './HeaderConfig';\nimport {\n  NativeStackNavigationHelpers,\n  NativeStackDescriptorMap,\n} from '../types';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\n\ntype Props = {\n  state: StackNavigationState;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map((route) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          stackPresentation = 'push',\n          stackAnimation,\n          contentStyle,\n        } = options;\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={Platform.OS === 'android' ? false : gestureEnabled}\n            stackPresentation={stackPresentation}\n            stackAnimation={stackAnimation}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}>\n            <HeaderConfig {...options} route={route} />\n            <View\n              style={[\n                styles.container,\n                {\n                  backgroundColor:\n                    stackPresentation !== 'transparentModal'\n                      ? colors.background\n                      : undefined,\n                },\n                contentStyle,\n              ]}>\n              {renderScene()}\n            </View>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}