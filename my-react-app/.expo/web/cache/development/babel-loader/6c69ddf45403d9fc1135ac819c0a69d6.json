{"ast":null,"code":"import * as React from 'react';\nimport { ScreenStackHeaderBackButtonImage, ScreenStackHeaderConfig, ScreenStackHeaderRightView, ScreenStackHeaderLeftView, ScreenStackHeaderCenterView } from 'react-native-screens';\nimport { useTheme } from '@react-navigation/native';\nexport default function HeaderConfig(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var route = props.route,\n      title = props.title,\n      headerRight = props.headerRight,\n      headerLeft = props.headerLeft,\n      headerCenter = props.headerCenter,\n      headerTitle = props.headerTitle,\n      headerBackTitle = props.headerBackTitle,\n      _props$headerBackTitl = props.headerBackTitleVisible,\n      headerBackTitleVisible = _props$headerBackTitl === void 0 ? true : _props$headerBackTitl,\n      backButtonImage = props.backButtonImage,\n      headerHideBackButton = props.headerHideBackButton,\n      headerHideShadow = props.headerHideShadow,\n      headerLargeTitleHideShadow = props.headerLargeTitleHideShadow,\n      headerTintColor = props.headerTintColor,\n      _props$headerTopInset = props.headerTopInsetEnabled,\n      headerTopInsetEnabled = _props$headerTopInset === void 0 ? true : _props$headerTopInset,\n      headerLargeTitle = props.headerLargeTitle,\n      headerTranslucent = props.headerTranslucent,\n      _props$headerStyle = props.headerStyle,\n      headerStyle = _props$headerStyle === void 0 ? {} : _props$headerStyle,\n      _props$headerLargeSty = props.headerLargeStyle,\n      headerLargeStyle = _props$headerLargeSty === void 0 ? {} : _props$headerLargeSty,\n      _props$headerTitleSty = props.headerTitleStyle,\n      headerTitleStyle = _props$headerTitleSty === void 0 ? {} : _props$headerTitleSty,\n      _props$headerLargeTit = props.headerLargeTitleStyle,\n      headerLargeTitleStyle = _props$headerLargeTit === void 0 ? {} : _props$headerLargeTit,\n      _props$headerBackTitl2 = props.headerBackTitleStyle,\n      headerBackTitleStyle = _props$headerBackTitl2 === void 0 ? {} : _props$headerBackTitl2,\n      headerShown = props.headerShown,\n      backButtonInCustomView = props.backButtonInCustomView;\n  return React.createElement(ScreenStackHeaderConfig, {\n    hidden: headerShown === false,\n    backButtonInCustomView: backButtonInCustomView,\n    translucent: headerTranslucent === true,\n    hideShadow: headerHideShadow,\n    largeTitleHideShadow: headerLargeTitleHideShadow,\n    hideBackButton: headerHideBackButton,\n    title: headerTitle !== undefined ? headerTitle : title !== undefined ? title : route.name,\n    titleFontFamily: headerTitleStyle.fontFamily,\n    titleFontSize: headerTitleStyle.fontSize,\n    titleColor: headerTitleStyle.color !== undefined ? headerTitleStyle.color : headerTintColor !== undefined ? headerTintColor : colors.text,\n    topInsetEnabled: headerTopInsetEnabled,\n    backTitle: headerBackTitleVisible ? headerBackTitle : ' ',\n    backTitleFontFamily: headerBackTitleStyle.fontFamily,\n    backTitleFontSize: headerBackTitleStyle.fontSize,\n    color: headerTintColor !== undefined ? headerTintColor : colors.primary,\n    largeTitle: headerLargeTitle,\n    largeTitleFontFamily: headerLargeTitleStyle.fontFamily,\n    largeTitleFontSize: headerLargeTitleStyle.fontSize,\n    largeTitleColor: headerLargeTitleStyle.color,\n    backgroundColor: headerStyle.backgroundColor !== undefined ? headerStyle.backgroundColor : colors.card,\n    largeTitleBackgroundColor: headerLargeStyle.backgroundColor\n  }, headerRight !== undefined ? React.createElement(ScreenStackHeaderRightView, null, headerRight({\n    tintColor: headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : colors.primary\n  })) : null, backButtonImage !== undefined ? React.createElement(ScreenStackHeaderBackButtonImage, {\n    key: \"backImage\",\n    source: backButtonImage\n  }) : null, headerLeft !== undefined ? React.createElement(ScreenStackHeaderLeftView, null, headerLeft({\n    tintColor: headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : colors.primary\n  })) : null, headerCenter !== undefined ? React.createElement(ScreenStackHeaderCenterView, null, headerCenter({\n    tintColor: headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : colors.primary\n  })) : null);\n}","map":{"version":3,"sources":["HeaderConfig.tsx"],"names":["colors","useTheme","headerBackTitleVisible","headerTopInsetEnabled","headerStyle","headerLargeStyle","headerTitleStyle","headerLargeTitleStyle","headerBackTitleStyle","backButtonInCustomView","headerShown","headerTranslucent","headerTitle","title","route","headerTintColor","backgroundColor","headerRight","tintColor","primary","backButtonImage","headerLeft","headerCenter"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,gCAAA,EAAA,uBAAA,EAAA,0BAAA,EAAA,yBAAA,EAAA,2BAAA,QAAA,sBAAA;AAOA,SAAA,QAAA,QAAA,0BAAA;AAOA,eAAe,SAAA,YAAA,CAAA,KAAA,EAAoC;AAAA,kBAC9BC,QAAnB,EADiD;AAAA,MACzCD,MADyC,aACzCA,MADyC;;AAAA,MAE3C,KAF2C,GAEjD,KAFiD,CAE3C,KAF2C;AAAA,MAE3C,KAF2C,GAEjD,KAFiD,CAE3C,KAF2C;AAAA,MAE3C,WAF2C,GAEjD,KAFiD,CAE3C,WAF2C;AAAA,MAE3C,UAF2C,GAEjD,KAFiD,CAE3C,UAF2C;AAAA,MAE3C,YAF2C,GAEjD,KAFiD,CAE3C,YAF2C;AAAA,MAE3C,WAF2C,GAEjD,KAFiD,CAE3C,WAF2C;AAAA,MAE3C,eAF2C,GAEjD,KAFiD,CAE3C,eAF2C;AAAA,8BAEjD,KAFiD,CAU/CE,sBAV+C;AAAA,MAU/CA,sBAV+C,sCAE3C,IAF2C;AAAA,MAE3C,eAF2C,GAEjD,KAFiD,CAE3C,eAF2C;AAAA,MAE3C,oBAF2C,GAEjD,KAFiD,CAE3C,oBAF2C;AAAA,MAE3C,gBAF2C,GAEjD,KAFiD,CAE3C,gBAF2C;AAAA,MAE3C,0BAF2C,GAEjD,KAFiD,CAE3C,0BAF2C;AAAA,MAE3C,eAF2C,GAEjD,KAFiD,CAE3C,eAF2C;AAAA,8BAEjD,KAFiD,CAgB/CC,qBAhB+C;AAAA,MAgB/CA,qBAhB+C,sCAE3C,IAF2C;AAAA,MAE3C,gBAF2C,GAEjD,KAFiD,CAE3C,gBAF2C;AAAA,MAE3C,iBAF2C,GAEjD,KAFiD,CAE3C,iBAF2C;AAAA,2BAEjD,KAFiD,CAmB/CC,WAnB+C;AAAA,MAmB/CA,WAnB+C,mCAE3C,EAF2C;AAAA,8BAEjD,KAFiD,CAoB/CC,gBApB+C;AAAA,MAoB/CA,gBApB+C,sCAE3C,EAF2C;AAAA,8BAEjD,KAFiD,CAqB/CC,gBArB+C;AAAA,MAqB/CA,gBArB+C,sCAE3C,EAF2C;AAAA,8BAEjD,KAFiD,CAsB/CC,qBAtB+C;AAAA,MAsB/CA,qBAtB+C,sCAE3C,EAF2C;AAAA,+BAEjD,KAFiD,CAuB/CC,oBAvB+C;AAAA,MAuB/CA,oBAvB+C,uCAE3C,EAF2C;AAAA,MAE3C,WAF2C,GAEjD,KAFiD,CAE3C,WAF2C;AAAA,MAyB/CC,sBAzB+C,GAEjD,KAFiD,CAyB/CA,sBAzB+C;AA4BjD,SACE,KAAA,CAAA,aAAA,CAAA,uBAAA,EAAA;AACE,IAAA,MAAM,EAAEC,WAAW,KADrB,KAAA;AAEE,IAAA,sBAAsB,EAFxB,sBAAA;AAGE,IAAA,WAAW,EAAEC,iBAAiB,KAHhC,IAAA;AAIE,IAAA,UAAU,EAJZ,gBAAA;AAKE,IAAA,oBAAoB,EALtB,0BAAA;AAME,IAAA,cAAc,EANhB,oBAAA;AAOE,IAAA,KAAK,EACHC,WAAW,KAAXA,SAAAA,GAAAA,WAAAA,GAEIC,KAAK,KAALA,SAAAA,GAAAA,KAAAA,GAEAC,KAAK,CAZb,IAAA;AAcE,IAAA,eAAe,EAAER,gBAAgB,CAdnC,UAAA;AAeE,IAAA,aAAa,EAAEA,gBAAgB,CAfjC,QAAA;AAgBE,IAAA,UAAU,EACRA,gBAAgB,CAAhBA,KAAAA,KAAAA,SAAAA,GACIA,gBAAgB,CADpBA,KAAAA,GAEIS,eAAe,KAAfA,SAAAA,GAAAA,eAAAA,GAEAf,MAAM,CArBd,IAAA;AAuBE,IAAA,eAAe,EAvBjB,qBAAA;AAwBE,IAAA,SAAS,EAAEE,sBAAsB,GAAA,eAAA,GAxBnC,GAAA;AAyBE,IAAA,mBAAmB,EAAEM,oBAAoB,CAzB3C,UAAA;AA0BE,IAAA,iBAAiB,EAAEA,oBAAoB,CA1BzC,QAAA;AA2BE,IAAA,KAAK,EAAEO,eAAe,KAAfA,SAAAA,GAAAA,eAAAA,GAAkDf,MAAM,CA3BjE,OAAA;AA4BE,IAAA,UAAU,EA5BZ,gBAAA;AA6BE,IAAA,oBAAoB,EAAEO,qBAAqB,CA7B7C,UAAA;AA8BE,IAAA,kBAAkB,EAAEA,qBAAqB,CA9B3C,QAAA;AA+BE,IAAA,eAAe,EAAEA,qBAAqB,CA/BxC,KAAA;AAgCE,IAAA,eAAe,EACbH,WAAW,CAAXA,eAAAA,KAAAA,SAAAA,GACIA,WAAW,CADfA,eAAAA,GAEIJ,MAAM,CAnCd,IAAA;AAqCE,IAAA,yBAAyB,EAAEK,gBAAgB,CAACW;AArC9C,GAAA,EAsCGC,WAAW,KAAXA,SAAAA,GACC,KAAA,CAAA,aAAA,CAAA,0BAAA,EAAA,IAAA,EACGA,WAAW,CAAC;AAAEC,IAAAA,SAAS,EAAEH,eAAF,KAAA,IAAEA,IAAAA,eAAF,KAAA,KAAA,CAAEA,GAAF,eAAEA,GAAmBf,MAAM,CAACmB;AAAvC,GAAD,CADd,CADDF,GAtCH,IAAA,EA2CG,eAAe,KAAf,SAAA,GACC,KAAA,CAAA,aAAA,CAAA,gCAAA,EAAA;AACE,IAAA,GAAG,EADL,WAAA;AAEE,IAAA,MAAM,EAAEG;AAFV,GAAA,CADD,GA3CH,IAAA,EAiDG,UAAU,KAAV,SAAA,GACC,KAAA,CAAA,aAAA,CAAA,yBAAA,EAAA,IAAA,EACGC,UAAU,CAAC;AAAEH,IAAAA,SAAS,EAAEH,eAAF,KAAA,IAAEA,IAAAA,eAAF,KAAA,KAAA,CAAEA,GAAF,eAAEA,GAAmBf,MAAM,CAACmB;AAAvC,GAAD,CADb,CADD,GAjDH,IAAA,EAsDG,YAAY,KAAZ,SAAA,GACC,KAAA,CAAA,aAAA,CAAA,2BAAA,EAAA,IAAA,EACGG,YAAY,CAAC;AAAEJ,IAAAA,SAAS,EAAEH,eAAF,KAAA,IAAEA,IAAAA,eAAF,KAAA,KAAA,CAAEA,GAAF,eAAEA,GAAmBf,MAAM,CAACmB;AAAvC,GAAD,CADf,CADD,GAvDL,IACE,CADF;AA8DD","sourcesContent":["import * as React from 'react';\nimport {\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n} from 'react-native-screens';\nimport { Route, useTheme } from '@react-navigation/native';\nimport { NativeStackNavigationOptions } from '../types';\n\ntype Props = NativeStackNavigationOptions & {\n  route: Route<string>;\n};\n\nexport default function HeaderConfig(props: Props) {\n  const { colors } = useTheme();\n  const {\n    route,\n    title,\n    headerRight,\n    headerLeft,\n    headerCenter,\n    headerTitle,\n    headerBackTitle,\n    headerBackTitleVisible = true,\n    backButtonImage,\n    headerHideBackButton,\n    headerHideShadow,\n    headerLargeTitleHideShadow,\n    headerTintColor,\n    headerTopInsetEnabled = true,\n    headerLargeTitle,\n    headerTranslucent,\n    headerStyle = {},\n    headerLargeStyle = {},\n    headerTitleStyle = {},\n    headerLargeTitleStyle = {},\n    headerBackTitleStyle = {},\n    headerShown,\n    backButtonInCustomView,\n  } = props;\n\n  return (\n    <ScreenStackHeaderConfig\n      hidden={headerShown === false}\n      backButtonInCustomView={backButtonInCustomView}\n      translucent={headerTranslucent === true}\n      hideShadow={headerHideShadow}\n      largeTitleHideShadow={headerLargeTitleHideShadow}\n      hideBackButton={headerHideBackButton}\n      title={\n        headerTitle !== undefined\n          ? headerTitle\n          : title !== undefined\n          ? title\n          : route.name\n      }\n      titleFontFamily={headerTitleStyle.fontFamily}\n      titleFontSize={headerTitleStyle.fontSize}\n      titleColor={\n        headerTitleStyle.color !== undefined\n          ? headerTitleStyle.color\n          : headerTintColor !== undefined\n          ? headerTintColor\n          : colors.text\n      }\n      topInsetEnabled={headerTopInsetEnabled}\n      backTitle={headerBackTitleVisible ? headerBackTitle : ' '}\n      backTitleFontFamily={headerBackTitleStyle.fontFamily}\n      backTitleFontSize={headerBackTitleStyle.fontSize}\n      color={headerTintColor !== undefined ? headerTintColor : colors.primary}\n      largeTitle={headerLargeTitle}\n      largeTitleFontFamily={headerLargeTitleStyle.fontFamily}\n      largeTitleFontSize={headerLargeTitleStyle.fontSize}\n      largeTitleColor={headerLargeTitleStyle.color}\n      backgroundColor={\n        headerStyle.backgroundColor !== undefined\n          ? headerStyle.backgroundColor\n          : colors.card\n      }\n      largeTitleBackgroundColor={headerLargeStyle.backgroundColor}>\n      {headerRight !== undefined ? (\n        <ScreenStackHeaderRightView>\n          {headerRight({ tintColor: headerTintColor ?? colors.primary })}\n        </ScreenStackHeaderRightView>\n      ) : null}\n      {backButtonImage !== undefined ? (\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={backButtonImage}\n        />\n      ) : null}\n      {headerLeft !== undefined ? (\n        <ScreenStackHeaderLeftView>\n          {headerLeft({ tintColor: headerTintColor ?? colors.primary })}\n        </ScreenStackHeaderLeftView>\n      ) : null}\n      {headerCenter !== undefined ? (\n        <ScreenStackHeaderCenterView>\n          {headerCenter({ tintColor: headerTintColor ?? colors.primary })}\n        </ScreenStackHeaderCenterView>\n      ) : null}\n    </ScreenStackHeaderConfig>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}