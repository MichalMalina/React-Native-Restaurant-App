{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ScreenStack, Screen as ScreenComponent } from 'react-native-screens';\nimport { StackActions, useTheme } from '@react-navigation/native';\nimport HeaderConfig from \"./HeaderConfig\";\nvar Screen = ScreenComponent;\nexport default function NativeStackView(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  return React.createElement(ScreenStack, {\n    style: styles.container\n  }, state.routes.map(function (route) {\n    var _descriptors$route$ke = descriptors[route.key],\n        options = _descriptors$route$ke.options,\n        renderScene = _descriptors$route$ke.render;\n    var gestureEnabled = options.gestureEnabled,\n        _options$stackPresent = options.stackPresentation,\n        stackPresentation = _options$stackPresent === void 0 ? 'push' : _options$stackPresent,\n        stackAnimation = options.stackAnimation,\n        contentStyle = options.contentStyle;\n    return React.createElement(Screen, {\n      key: route.key,\n      style: StyleSheet.absoluteFill,\n      gestureEnabled: Platform.OS === 'android' ? false : gestureEnabled,\n      stackPresentation: stackPresentation,\n      stackAnimation: stackAnimation,\n      onAppear: function onAppear() {\n        navigation.emit({\n          type: 'appear',\n          target: route.key\n        });\n      },\n      onDismissed: function onDismissed() {\n        navigation.emit({\n          type: 'dismiss',\n          target: route.key\n        });\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      }\n    }, React.createElement(HeaderConfig, _extends({}, options, {\n      route: route\n    })), React.createElement(View, {\n      style: [styles.container, {\n        backgroundColor: stackPresentation !== 'transparentModal' ? colors.background : undefined\n      }, contentStyle]\n    }, renderScene()));\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["NativeStackView.tsx"],"names":["Screen","descriptors","colors","useTheme","styles","container","route","render","renderScene","stackPresentation","contentStyle","StyleSheet","Platform","navigation","type","target","key","StackActions","source","state","backgroundColor","undefined","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport {\n  ScreenStack,\n  Screen as ScreenComponent,\n  ScreenProps,\n} from 'react-native-screens';\nimport {\n  StackNavigationState,\n  StackActions,\n  useTheme,\n} from '@react-navigation/native';\nimport HeaderConfig from './HeaderConfig';\nimport {\n  NativeStackNavigationHelpers,\n  NativeStackDescriptorMap,\n} from '../types';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\n\ntype Props = {\n  state: StackNavigationState;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map((route) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          stackPresentation = 'push',\n          stackAnimation,\n          contentStyle,\n        } = options;\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={Platform.OS === 'android' ? false : gestureEnabled}\n            stackPresentation={stackPresentation}\n            stackAnimation={stackAnimation}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}>\n            <HeaderConfig {...options} route={route} />\n            <View\n              style={[\n                styles.container,\n                {\n                  backgroundColor:\n                    stackPresentation !== 'transparentModal'\n                      ? colors.background\n                      : undefined,\n                },\n                contentStyle,\n              ]}>\n              {renderScene()}\n            </View>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}